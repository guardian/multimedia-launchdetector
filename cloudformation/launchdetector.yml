AWSTemplateFormatVersion: '2010-09-09'
Description: "Lambda function to update Pluto with published information from CAPI"
Parameters:
  CapiStreamArn:
    Type: String
    Description: Arn of the Crier kinesis stream to attach to
  CapiAccountId:
    Type: String
    Description: Numeric account ID of the account to be allowed to trigger the launch detector
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: launchdetector
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: multimedia
  Stage:
    Type: String
    AllowedValues:
      - CODE
      - DEV
      - PROD
    Description: Deployment stage
  VPCID:
    Description: Virtual Private Cloud to deploy into
    Type: AWS::EC2::VPC::Id
  DeploySubnets:
    Description: Subnets to deploy into.  These should be the same as where the database lives.
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  LambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Launch Detector lambda function security group
      VpcId: !Ref VPCID
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaLogAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LambdaDLQAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
                Resource: !GetAtt DeadLetterQueue.Arn
        - PolicyName: LambdaTriggerAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  Resource: !GetAtt ForwardedKinesisStream.Arn
                - Effect: Allow
                  Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:ListTopics
                  - sns:GetTopicAttributes
                  Resource: !Ref ForwardedSNSTopic
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref CapiAccountId
          Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaTriggerAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                  - kinesis:Put*
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  Resource: !GetAtt ForwardedKinesisStream.Arn
                - Effect: Allow
                  Action:
                  - sns:Publish
                  - sns:ListTopics
                  - sns:GetTopicAttributes
                  Resource: !Ref ForwardedSNSTopic
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  ForwardedSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub Forwarded SNS topic for launchdetector-${Stage}
      #FIXME: this is causing a circular dependency issue
#      Subscription:
#        - Endpoint: !GetAtt LaunchDetectorLambda.Arn
#          Protocol: lambda
  ForwardedKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      #FIXME: if brought into production these should be parameters
      RetentionPeriodHours: 24
      ShardCount: 1
  LaunchDetectorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        #this zip is uploaded by the buildlambdazip.sh script, in ../_transcoder_lambda
        S3Bucket: gnm-multimedia-rr-deployables
        S3Key: !Sub ${Stack}/${Stage}/${App}/launchdetector_lambda.jar
      Description: Launch Detector which updates Pluto with fresh information from Capi
      FunctionName: !Sub launchdetector-${Stage}
      Handler: LaunchDetectorLambda
      Role: !Sub ${LambdaRole.Arn}
      Runtime: java8
      Timeout: 60
#      DeadLetterConfig:
#        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          CRIER_STREAM: !Ref CapiStreamArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSG
        SubnetIds: !Ref DeploySubnets
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ForwardedSNSTopic
      FunctionName: !Sub ${LaunchDetectorLambda.Arn}
Outputs:
  CrossAccountRole:
    Value: !GetAtt CrossAccountRole.Arn
    Description: Role to allow access to the trigger from another AWS account
  ForwardedSNSTopic:
    Value: !Ref ForwardedSNSTopic
    Description: SNS topic that triggers the lambda. This should be linked to the atom-event-forwarder lambda.
  ForwardedKinesisStream:
    Value: !Ref ForwardedKinesisStream
    Description: Kinesis stream that can trigger the lambda. This should be linked to the atom-event-forwarder lambda.